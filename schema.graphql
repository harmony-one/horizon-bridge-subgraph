enum Network {
  HARMONY
  ETHEREUM
  BINANCE
}

type Wallet @entity {
  id: ID!

  managers: [Manager!]! @derivedFrom(field: "wallet")

  assetsCount: BigInt!

  transactions: [Transaction!]! @derivedFrom(field: "wallet")
  transactionsCount: BigInt!
  transactionsConfirmedCount: BigInt!
  transactionsExecutedCount: BigInt!

  totalTransactionFee: BigDecimal!
  avgTransactionFee: BigDecimal!

  events: [WalletEvent!]! @derivedFrom(field: "wallet")

  eventsCount: BigInt!
  usersCount: BigInt!

  dayData: [WalletDayData!]! @derivedFrom(field: "wallet")
}

type Transaction @entity {
  id: ID!
  wallet: Wallet!
  destination: String!
  value: BigInt!
  data: Bytes!
  submittedBy: String!

  events: [WalletEvent!]! @derivedFrom(field: "transaction")

  confirmations: [Confirmation!]! @derivedFrom(field: "transaction")
  confirmationsCount: BigInt!
  confirmationsRequired: BigInt!
  confirmed: Boolean!

  executed: Boolean!
  execution: Execution
  executions: [Execution!]! @derivedFrom(field: "transaction")

  timestamp: BigInt!
  blockNumber: BigInt!
  txIndex: BigInt!
  txHash: String!

  manager: Manager
}

type Confirmation @entity {
  id: ID!
  transaction: Transaction!
  sender: String!
  timestamp: BigInt!
  blockNumber: BigInt!
  txIndex: BigInt!
  txHash: String!
}

enum ExecutionStatus {
  SUCCESS
  FAILURE
}

type Execution @entity {
  id: ID!
  status: ExecutionStatus!
  sender: String!
  transaction: Transaction!
  timestamp: BigInt!
  blockNumber: BigInt!
  txIndex: BigInt!
  txHash: String!
}

type Manager @entity {
  id: ID!
  wallet: Wallet!

  assets: [Asset!]! @derivedFrom(field: "manager")

  events: [Event!]! @derivedFrom(field: "manager")
  eventsCount: BigInt!

  locks: [Lock!]! @derivedFrom(field: "manager")
  locksCount: BigInt!
  unlocks: [Unlock!]! @derivedFrom(field: "manager")
  unlocksCount: BigInt!

  mints: [Mint!]! @derivedFrom(field: "manager")
  mintsCount: BigInt!
  burns: [Burn!]! @derivedFrom(field: "manager")
  burnsCount: BigInt!

  nftMints: [NFTMint!]! @derivedFrom(field: "manager")
  nftMintsCount: BigInt!
  nftBurns: [NFTBurn!]! @derivedFrom(field: "manager")
  nftBurnsCount: BigInt!
}

type User @entity {
  id: ID!

  events: [Event!]! @derivedFrom(field: "user")
  eventsCount: BigInt!

  locks: [Lock!]! @derivedFrom(field: "user")
  locksCount: BigInt!
  unlocks: [Unlock!]! @derivedFrom(field: "user")
  unlocksCount: BigInt!

  mints: [Mint!]! @derivedFrom(field: "user")
  mintsCount: BigInt!
  burns: [Burn!]! @derivedFrom(field: "user")
  burnsCount: BigInt!

  nftMints: [NFTMint!]! @derivedFrom(field: "user")
  nftMintsCount: BigInt!
  nftBurns: [NFTBurn!]! @derivedFrom(field: "user")
  nftBurnsCount: BigInt!
}

interface Asset {
  id: ID!
  network: Network!
  manager: Manager
  symbol: String!
  name: String!

  address: Bytes!
  mappedAddress: Bytes

  events: [Event!]! @derivedFrom(field: "asset")
  eventsCount: BigInt!
}

type Token implements Asset @entity {
  id: ID!
  network: Network!
  manager: Manager
  symbol: String!
  name: String!

  address: Bytes!
  mappedAddress: Bytes

  events: [Event!]! @derivedFrom(field: "asset")
  eventsCount: BigInt!

  decimals: BigInt!

  locks: [Lock!]! @derivedFrom(field: "token")
  locksCount: BigInt!
  unlocks: [Unlock!]! @derivedFrom(field: "token")
  unlocksCount: BigInt!

  totalLocked: BigDecimal!

  volume: BigDecimal!

  dayData: [TokenDayData!]! @derivedFrom(field: "token")
}

type BridgedToken implements Asset @entity {
  id: ID!
  network: Network!
  manager: Manager
  symbol: String!
  name: String!

  address: Bytes!
  mappedAddress: Bytes

  events: [Event!]! @derivedFrom(field: "asset")
  eventsCount: BigInt!

  decimals: BigInt!

  mints: [Mint!]! @derivedFrom(field: "token")
  mintsCount: BigInt!
  burns: [Burn!]! @derivedFrom(field: "token")
  burnsCount: BigInt!

  totalLocked: BigDecimal!

  volume: BigDecimal!

  dayData: [BridgedTokenDayData!]! @derivedFrom(field: "token")
}

# type NFT implements Asset @entity {
#   id: ID!
#   manager: Manager
#   symbol: String!
#   name: String!

#   address: Bytes!
#   mappedAddress: Bytes

#   events: [Event!]! @derivedFrom(field: "asset")
#   eventsCount: BigInt!
# }

type BridgedNFT implements Asset @entity {
  id: ID!
  network: Network!
  manager: Manager
  symbol: String!
  name: String!

  address: Bytes!
  mappedAddress: Bytes

  events: [Event!]! @derivedFrom(field: "asset")
  eventsCount: BigInt!

  mints: [NFTMint!]! @derivedFrom(field: "token")
  mintsCount: BigInt!
  burns: [NFTBurn!]! @derivedFrom(field: "token")
  burnsCount: BigInt!

  inventory: [BigInt!]!
}

enum EventType {
  LOCK
  UNLOCK
  MINT
  BURN

  NFT_MINT
  NFT_BURN

  SUBMISSION
  CONFIRMATION
  EXECUTION
  EXECUTION_FAILED

  WITHDRAW
}

interface Event {
  id: ID!
  type: EventType!
  contract: Bytes!

  manager: Manager
  asset: Asset
  user: User

  timestamp: BigInt!
  blockNumber: BigInt!
  txIndex: BigInt!
  txHash: Bytes!
}

type WalletEvent implements Event @entity {
  id: ID!
  type: EventType!
  contract: Bytes!

  manager: Manager
  asset: Asset
  user: User

  timestamp: BigInt!
  blockNumber: BigInt!
  txIndex: BigInt!
  txHash: Bytes!

  wallet: Wallet!
  transaction: Transaction!
}

type Withdraw implements Event @entity {
  id: ID!
  type: EventType!
  contract: Bytes!

  manager: Manager
  asset: Asset
  user: User

  timestamp: BigInt!
  blockNumber: BigInt!
  txIndex: BigInt!
  txHash: Bytes!

  recipient: String!
  amount: BigDecimal!
}

type Mint implements Event @entity {
  id: ID!
  type: EventType!
  contract: Bytes!

  manager: Manager
  asset: Asset
  user: User

  timestamp: BigInt!
  blockNumber: BigInt!
  txIndex: BigInt!
  txHash: Bytes!

  token: BridgedToken!

  recipient: Bytes!
  receiptId: Bytes!
  amount: BigDecimal!
}

type Burn implements Event @entity {
  id: ID!
  type: EventType!
  contract: Bytes!

  manager: Manager
  asset: Asset
  user: User

  timestamp: BigInt!
  blockNumber: BigInt!
  txIndex: BigInt!
  txHash: Bytes!
  txFee: BigDecimal!

  token: BridgedToken!

  sender: Bytes!
  recipient: Bytes!
  amount: BigDecimal!
}

type Lock implements Event @entity {
  id: ID!
  type: EventType!
  contract: Bytes!

  manager: Manager
  asset: Asset
  user: User

  timestamp: BigInt!
  blockNumber: BigInt!
  txIndex: BigInt!
  txHash: Bytes!
  txFee: BigDecimal!

  token: Token!

  sender: Bytes!
  recipient: Bytes!
  amount: BigDecimal!
}

type Unlock implements Event @entity {
  id: ID!
  type: EventType!
  contract: Bytes!

  manager: Manager
  asset: Asset
  user: User

  timestamp: BigInt!
  blockNumber: BigInt!
  txIndex: BigInt!
  txHash: Bytes!

  token: Token!

  recipient: Bytes!
  receiptId: Bytes!
  amount: BigDecimal!
}

type NFTMint implements Event @entity {
  id: ID!
  type: EventType!
  contract: Bytes!

  manager: Manager
  asset: Asset
  user: User

  timestamp: BigInt!
  blockNumber: BigInt!
  txIndex: BigInt!
  txHash: Bytes!

  token: BridgedNFT!

  recipient: Bytes!
  receiptId: Bytes!
  tokenId: BigInt!
}

type NFTBurn implements Event @entity {
  id: ID!
  type: EventType!
  contract: Bytes!

  manager: Manager
  asset: Asset
  user: User

  timestamp: BigInt!
  blockNumber: BigInt!
  txIndex: BigInt!
  txHash: Bytes!

  token: BridgedNFT!

  sender: Bytes!
  recipient: Bytes!
  tokenId: BigInt!
}

type WalletDayData @entity {
  id: ID!
  date: Int!
  wallet: Wallet!
  usersCount: BigInt!
  newUsersCount: BigInt!
  assetsCount: BigInt!
  newAssetsCount: BigInt!
  eventsCount: BigInt!
  transactionsCount: BigInt!
  totalTransactionFee: BigDecimal!
  avgTransactionFee: BigDecimal!
}

type TokenDayData @entity {
  id: ID!
  date: Int!
  token: Token!
  volume: BigDecimal!
  eventsCount: BigInt!
  locksCount: BigInt!
  unlocksCount: BigInt!
  totalLocked: BigDecimal!
}

type BridgedTokenDayData @entity {
  id: ID!
  date: Int!
  token: BridgedToken!
  volume: BigDecimal!
  eventsCount: BigInt!
  mintsCount: BigInt!
  burnsCount: BigInt!
  totalLocked: BigDecimal!
}
